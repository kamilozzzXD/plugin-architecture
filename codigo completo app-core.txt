package org.example.core;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * AppContext: objeto compartido por el núcleo y los plugins.
 * Guarda referencias al último archivo, lista de audios, resultados, y servicios compartidos.
 */
public class AppContext {

    private volatile File ultimoArchivo;          // archivo "seleccionado" o producido
    private volatile File ultimoArchivoAudio;     // si aplica
    private volatile File ultimoArchivoTexto;     // si aplica
    private volatile String ultimoResultado;      // texto resultado (p. ej. transcripción)
    private final List<File> listaAudios = Collections.synchronizedList(new ArrayList<>());
    private final Map<String, Object> servicios = new ConcurrentHashMap<>();

    // getters / setters

    public File getUltimoArchivo() {
        return ultimoArchivo;
    }

    public synchronized void setUltimoArchivo(File ultimoArchivo) {
        this.ultimoArchivo = ultimoArchivo;
    }

    public File getUltimoArchivoAudio() {
        return ultimoArchivoAudio;
    }

    public synchronized void setUltimoArchivoAudio(File ultimoArchivoAudio) {
        this.ultimoArchivoAudio = ultimoArchivoAudio;
        if (ultimoArchivoAudio != null) {
            this.ultimoArchivo = ultimoArchivoAudio;
            addAudio(ultimoArchivoAudio);
        }
    }

    public File getUltimoArchivoTexto() {
        return ultimoArchivoTexto;
    }

    public synchronized void setUltimoArchivoTexto(File ultimoArchivoTexto) {
        this.ultimoArchivoTexto = ultimoArchivoTexto;
        if (ultimoArchivoTexto != null) {
            this.ultimoArchivo = ultimoArchivoTexto;
        }
    }

    public String getUltimoResultado() {
        return ultimoResultado;
    }

    public synchronized void setUltimoResultado(String ultimoResultado) {
        this.ultimoResultado = ultimoResultado;
    }

    public List<File> getListaAudios() {
        synchronized (listaAudios) {
            return new ArrayList<>(listaAudios);
        }
    }

    public void addAudio(File audio) {
        if (audio != null) {
            listaAudios.add(audio);
        }
    }

    public void putServicio(String clave, Object servicio) {
        servicios.put(clave, servicio);
    }

    public Object getServicio(String clave) {
        return servicios.get(clave);
    }
}




package org.example.core;

public class AppContextSingleton {
    private static final AppContext INSTANCE = new AppContext();
    public static AppContext get() {
        return INSTANCE;
    }
}




package org.example.core;

import javax.sound.sampled.*;
import java.io.File;
import java.io.IOException;

public class AudioRecorder {

    private TargetDataLine line;

    public void startRecording(File outputFile, int durationSeconds) {
        try {
            AudioFormat format = getAudioFormat();
            DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);

            if (!AudioSystem.isLineSupported(info)) {
                System.out.println("Micrófono no soportado.");
                return;
            }

            line = (TargetDataLine) AudioSystem.getLine(info);
            line.open(format);
            line.start();

            Thread thread = new Thread(() -> {
                try (AudioInputStream ais = new AudioInputStream(line)) {
                    AudioSystem.write(ais, AudioFileFormat.Type.WAVE, outputFile);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            });

            thread.start();

            // detener después de cierto tiempo
            Thread.sleep(durationSeconds * 1000);
            stopRecording();

            System.out.println("Grabación guardada en: " + outputFile.getAbsolutePath());

        } catch (LineUnavailableException | InterruptedException e) {
            e.printStackTrace();
        }
    }

    public void stopRecording() {
        if (line != null) {
            line.stop();
            line.close();
        }
    }

    private AudioFormat getAudioFormat() {
        float sampleRate = 16000;
        int sampleSizeInBits = 16;
        int channels = 1; // mono
        boolean signed = true;
        boolean bigEndian = false;
        return new AudioFormat(sampleRate, sampleSizeInBits, channels, signed, bigEndian);
    }
}




package org.example.core;

import org.example.interfaces.PluginFiltro;

import java.io.File;

public class FiltroExecutor {

    public String ejecutarFiltro(PluginFiltro filtro, AppContext contexto) {
        String tipo = obtenerTipoArchivo(contexto);
        if (!filtro.soportaTipo(tipo)) {
            return "El plugin no soporta este tipo de archivo.";
        }
        return filtro.ejecutar(contexto);
    }

    private String obtenerTipoArchivo(AppContext contexto) {
        File archivo = contexto.getUltimoArchivo();
        if (archivo == null) {
            return "desconocido";
        }
        String nombre = archivo.getName().toLowerCase();
        if (nombre.endsWith(".mp3") || nombre.endsWith(".wav")) {
            return "audio";
        } else if (nombre.endsWith(".txt")) {
            return "texto";
        }
        return "desconocido";
    }
}




package org.example.core;

import org.example.interfaces.PluginFiltro;

import java.io.File;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.*;

public class PluginManager {

    public List<PluginFiltro> cargarPlugins() {
        List<PluginFiltro> plugins = new ArrayList<>();
        try {
            // Carpeta Plugins
            File pluginsDir = new File("Plugins");
            if (!pluginsDir.exists() || !pluginsDir.isDirectory()) {
                System.out.println("No se encontró la carpeta Plugins.");
                return plugins;
            }

            // Juntar todos los JARs
            File[] jars = pluginsDir.listFiles((dir, name) -> name.endsWith(".jar"));
            if (jars == null || jars.length == 0) {
                System.out.println("No hay plugins disponibles en /Plugins.");
                return plugins;
            }

            // Crear classloader con todos los jars
            URL[] urls = new URL[jars.length];
            for (int i = 0; i < jars.length; i++) {
                urls[i] = jars[i].toURI().toURL();
            }
            URLClassLoader pluginClassLoader = new URLClassLoader(urls, this.getClass().getClassLoader());

            // Cargar implementaciones de PluginFiltro
            ServiceLoader<PluginFiltro> loader = ServiceLoader.load(PluginFiltro.class, pluginClassLoader);
            for (PluginFiltro filtro : loader) {
                plugins.add(filtro);
                System.out.println("Plugin cargado: " + filtro.getNombre());
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return plugins;
    }
}




package org.example.gui;


import org.example.core.*;
import org.example.interfaces.PluginFiltro;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.util.List;

public class VentanaPrincipal extends JFrame {

    private final AudioRecorder audioRecorder;
    private final PluginManager pluginManager;
    private final ButtonGroup grupoPlugins;

    public VentanaPrincipal() {
        this.audioRecorder = new AudioRecorder();
        this.pluginManager = new PluginManager();
        this.grupoPlugins = new ButtonGroup();

        setTitle("App Núcleo - Arquitectura Plugin");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());



// --- Barra de menú ---
        JMenuBar menuBar = new JMenuBar();
        JMenu menuPlugins = new JMenu("Plugins");

// cargar plugins dinámicamente
        List<PluginFiltro> plugins = pluginManager.cargarPlugins();
        if (plugins.isEmpty()) {
            JMenuItem noPlugins = new JMenuItem("No hay plugins cargados");
            noPlugins.setEnabled(false);
            menuPlugins.add(noPlugins);
        } else {
            for (PluginFiltro plugin : plugins) {
                JRadioButtonMenuItem item = new JRadioButtonMenuItem(plugin.getNombre());
                item.addActionListener(e -> {
                    AppContext contexto = AppContextSingleton.get(); // usamos una única instancia compartida

                    // si no hay archivo cargado todavía, pedir al usuario
                    // Solo si el plugin requiere archivo inicial
                    if (plugin.requiereArchivoInicial() && contexto.getUltimoArchivoAudio() == null) {
                        JFileChooser chooser = new JFileChooser();
                        int ret = chooser.showOpenDialog(this);
                        if (ret == JFileChooser.APPROVE_OPTION) {
                            contexto.setUltimoArchivoAudio(chooser.getSelectedFile());
                        }
                    }


                    FiltroExecutor executor = new FiltroExecutor();
                    String resultado = executor.ejecutarFiltro(plugin, contexto);

                    JOptionPane.showMessageDialog(this,
                            "Descripción: " + plugin.getDescripcion() + "\n\nResultado: " + resultado,
                            "Plugin ejecutado",
                            JOptionPane.INFORMATION_MESSAGE);
                });
                grupoPlugins.add(item);
                menuPlugins.add(item);
            }
        }

        menuBar.add(menuPlugins);
        setJMenuBar(menuBar);

// --- Panel principal ---
        JLabel label = new JLabel("Bienvenido al núcleo de la aplicación", SwingConstants.CENTER);
        label.setFont(new Font("Arial", Font.BOLD, 16));
        add(label, BorderLayout.NORTH);

        JButton grabarBtn = new JButton("Grabar 5sg");
        grabarBtn.addActionListener(e -> {
            // Generar nombre único con timestamp
            String nombreArchivo = "grabacion_" + System.currentTimeMillis() + ".wav";
            File output = new File(nombreArchivo);

            audioRecorder.startRecording(output, 5);

            // actualizar AppContext con el nuevo archivo
            AppContext contexto = AppContextSingleton.get();
            contexto.setUltimoArchivoAudio(output);

            JOptionPane.showMessageDialog(this,
                    "Grabación finalizada.\nArchivo: " + output.getAbsolutePath(),
                    "Grabación", JOptionPane.INFORMATION_MESSAGE);
        });

        JPanel panelCentro = new JPanel();
        panelCentro.add(grabarBtn);
        add(panelCentro, BorderLayout.CENTER);

    }
}



package org.example.interfaces;

import org.example.core.AppContext;

/**
 * Contrato de plugins: ahora recibe AppContext para mejor interoperabilidad.
 */
public interface PluginFiltro {
    String getNombre();
    String getDescripcion();
    boolean soportaTipo(String tipoArchivo);
    String ejecutar(AppContext contexto);
    default boolean requiereArchivoInicial() {
        return true; // por defecto sí requiere archivo
    }
}




package org.example.model;

import java.io.File;

public class ArchivoAudio {
    private final File archivo;

    public ArchivoAudio(File archivo) {
        this.archivo = archivo;
    }

    public File getArchivo() {
        return archivo;
    }
}



package org.example.model;


import java.io.File;

public class ArchivoTexto {
    private final File archivo;

    public ArchivoTexto(File archivo) {
        this.archivo = archivo;
    }

    public File getArchivo() {
        return archivo;
    }
}




package org.example;

import org.example.gui.VentanaPrincipal;
import javax.swing.*;

public class Main {
    public static void main(String[] args) {

        System.out.println("=== Núcleo de la aplicación iniciado ===");

        SwingUtilities.invokeLater(() -> {
            VentanaPrincipal ventana = new VentanaPrincipal();
            ventana.setVisible(true);
        });
    }
}



<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- Hereda del POM padre -->
    <parent>
        <groupId>org.example</groupId>
        <artifactId>plugin-architecture</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <artifactId>app-core</artifactId>
    <packaging>jar</packaging>

    <name>app-core</name>
    <description>Núcleo de la aplicación con arquitectura de plugins</description>

    <dependencies>
        <!-- Dependencias básicas de Java Swing y sonido ya vienen en el JDK -->
        <!-- Puedes agregar JUnit para pruebas -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>2.2.224</version>
        </dependency>


    </dependencies>

    <build>
        <plugins>
            <!-- Plugin de compilación para versiones modernas de Java -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <release>21</release>
                </configuration>
            </plugin>

            <!-- Plugin de ejecución (para poder correr con mvn exec:java) -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <mainClass>org.example.TextoAAudio</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
